// Code generated by mockery v2.53.3. DO NOT EDIT.

package repository

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockGorm is an autogenerated mock type for the IGorm type
type MockGorm struct {
	mock.Mock
}

type MockGorm_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGorm) EXPECT() *MockGorm_Expecter {
	return &MockGorm_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: opts
func (_m *MockGorm) Begin(opts ...*sql.TxOptions) *gorm.DB {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(...*sql.TxOptions) *gorm.DB); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockGorm_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockGorm_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - opts ...*sql.TxOptions
func (_e *MockGorm_Expecter) Begin(opts ...interface{}) *MockGorm_Begin_Call {
	return &MockGorm_Begin_Call{Call: _e.mock.On("Begin",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockGorm_Begin_Call) Run(run func(opts ...*sql.TxOptions)) *MockGorm_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*sql.TxOptions, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*sql.TxOptions)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockGorm_Begin_Call) Return(_a0 *gorm.DB) *MockGorm_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGorm_Begin_Call) RunAndReturn(run func(...*sql.TxOptions) *gorm.DB) *MockGorm_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with no fields
func (_m *MockGorm) Commit() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockGorm_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockGorm_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockGorm_Expecter) Commit() *MockGorm_Commit_Call {
	return &MockGorm_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockGorm_Commit_Call) Run(run func()) *MockGorm_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGorm_Commit_Call) Return(_a0 *gorm.DB) *MockGorm_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGorm_Commit_Call) RunAndReturn(run func() *gorm.DB) *MockGorm_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with no fields
func (_m *MockGorm) Rollback() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockGorm_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockGorm_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockGorm_Expecter) Rollback() *MockGorm_Rollback_Call {
	return &MockGorm_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockGorm_Rollback_Call) Run(run func()) *MockGorm_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGorm_Rollback_Call) Return(_a0 *gorm.DB) *MockGorm_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGorm_Rollback_Call) RunAndReturn(run func() *gorm.DB) *MockGorm_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGorm creates a new instance of MockGorm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGorm(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGorm {
	mock := &MockGorm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
