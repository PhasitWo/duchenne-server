// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"github.com/PhasitWo/duchenne-server/model"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepo is an autogenerated mock type for the IRepo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// CreateAppointment provides a mock function for the type MockRepo
func (_mock *MockRepo) CreateAppointment(appointment model.Appointment) (int, error) {
	ret := _mock.Called(appointment)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppointment")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Appointment) (int, error)); ok {
		return returnFunc(appointment)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Appointment) int); ok {
		r0 = returnFunc(appointment)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Appointment) error); ok {
		r1 = returnFunc(appointment)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreateAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppointment'
type MockRepo_CreateAppointment_Call struct {
	*mock.Call
}

// CreateAppointment is a helper method to define mock.On call
//   - appointment model.Appointment
func (_e *MockRepo_Expecter) CreateAppointment(appointment interface{}) *MockRepo_CreateAppointment_Call {
	return &MockRepo_CreateAppointment_Call{Call: _e.mock.On("CreateAppointment", appointment)}
}

func (_c *MockRepo_CreateAppointment_Call) Run(run func(appointment model.Appointment)) *MockRepo_CreateAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Appointment
		if args[0] != nil {
			arg0 = args[0].(model.Appointment)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_CreateAppointment_Call) Return(n int, err error) *MockRepo_CreateAppointment_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepo_CreateAppointment_Call) RunAndReturn(run func(appointment model.Appointment) (int, error)) *MockRepo_CreateAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContent provides a mock function for the type MockRepo
func (_mock *MockRepo) CreateContent(content model.Content) (int, error) {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Content) (int, error)); ok {
		return returnFunc(content)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Content) int); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Content) error); ok {
		r1 = returnFunc(content)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContent'
type MockRepo_CreateContent_Call struct {
	*mock.Call
}

// CreateContent is a helper method to define mock.On call
//   - content model.Content
func (_e *MockRepo_Expecter) CreateContent(content interface{}) *MockRepo_CreateContent_Call {
	return &MockRepo_CreateContent_Call{Call: _e.mock.On("CreateContent", content)}
}

func (_c *MockRepo_CreateContent_Call) Run(run func(content model.Content)) *MockRepo_CreateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Content
		if args[0] != nil {
			arg0 = args[0].(model.Content)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_CreateContent_Call) Return(n int, err error) *MockRepo_CreateContent_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepo_CreateContent_Call) RunAndReturn(run func(content model.Content) (int, error)) *MockRepo_CreateContent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDevice provides a mock function for the type MockRepo
func (_mock *MockRepo) CreateDevice(d model.Device) (int, error) {
	ret := _mock.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Device) (int, error)); ok {
		return returnFunc(d)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Device) int); ok {
		r0 = returnFunc(d)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Device) error); ok {
		r1 = returnFunc(d)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevice'
type MockRepo_CreateDevice_Call struct {
	*mock.Call
}

// CreateDevice is a helper method to define mock.On call
//   - d model.Device
func (_e *MockRepo_Expecter) CreateDevice(d interface{}) *MockRepo_CreateDevice_Call {
	return &MockRepo_CreateDevice_Call{Call: _e.mock.On("CreateDevice", d)}
}

func (_c *MockRepo_CreateDevice_Call) Run(run func(d model.Device)) *MockRepo_CreateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Device
		if args[0] != nil {
			arg0 = args[0].(model.Device)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_CreateDevice_Call) Return(n int, err error) *MockRepo_CreateDevice_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepo_CreateDevice_Call) RunAndReturn(run func(d model.Device) (int, error)) *MockRepo_CreateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDoctor provides a mock function for the type MockRepo
func (_mock *MockRepo) CreateDoctor(doctor model.Doctor) (int, error) {
	ret := _mock.Called(doctor)

	if len(ret) == 0 {
		panic("no return value specified for CreateDoctor")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Doctor) (int, error)); ok {
		return returnFunc(doctor)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Doctor) int); ok {
		r0 = returnFunc(doctor)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Doctor) error); ok {
		r1 = returnFunc(doctor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreateDoctor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDoctor'
type MockRepo_CreateDoctor_Call struct {
	*mock.Call
}

// CreateDoctor is a helper method to define mock.On call
//   - doctor model.Doctor
func (_e *MockRepo_Expecter) CreateDoctor(doctor interface{}) *MockRepo_CreateDoctor_Call {
	return &MockRepo_CreateDoctor_Call{Call: _e.mock.On("CreateDoctor", doctor)}
}

func (_c *MockRepo_CreateDoctor_Call) Run(run func(doctor model.Doctor)) *MockRepo_CreateDoctor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Doctor
		if args[0] != nil {
			arg0 = args[0].(model.Doctor)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_CreateDoctor_Call) Return(n int, err error) *MockRepo_CreateDoctor_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepo_CreateDoctor_Call) RunAndReturn(run func(doctor model.Doctor) (int, error)) *MockRepo_CreateDoctor_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePatient provides a mock function for the type MockRepo
func (_mock *MockRepo) CreatePatient(patient model.Patient) (int, error) {
	ret := _mock.Called(patient)

	if len(ret) == 0 {
		panic("no return value specified for CreatePatient")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Patient) (int, error)); ok {
		return returnFunc(patient)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Patient) int); ok {
		r0 = returnFunc(patient)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Patient) error); ok {
		r1 = returnFunc(patient)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreatePatient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePatient'
type MockRepo_CreatePatient_Call struct {
	*mock.Call
}

// CreatePatient is a helper method to define mock.On call
//   - patient model.Patient
func (_e *MockRepo_Expecter) CreatePatient(patient interface{}) *MockRepo_CreatePatient_Call {
	return &MockRepo_CreatePatient_Call{Call: _e.mock.On("CreatePatient", patient)}
}

func (_c *MockRepo_CreatePatient_Call) Run(run func(patient model.Patient)) *MockRepo_CreatePatient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Patient
		if args[0] != nil {
			arg0 = args[0].(model.Patient)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_CreatePatient_Call) Return(n int, err error) *MockRepo_CreatePatient_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepo_CreatePatient_Call) RunAndReturn(run func(patient model.Patient) (int, error)) *MockRepo_CreatePatient_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuestion provides a mock function for the type MockRepo
func (_mock *MockRepo) CreateQuestion(patientId int, topic string, question string, createAt int) (int, error) {
	ret := _mock.Called(patientId, topic, question, createAt)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuestion")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, string, string, int) (int, error)); ok {
		return returnFunc(patientId, topic, question, createAt)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string, string, int) int); ok {
		r0 = returnFunc(patientId, topic, question, createAt)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(int, string, string, int) error); ok {
		r1 = returnFunc(patientId, topic, question, createAt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type MockRepo_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - patientId int
//   - topic string
//   - question string
//   - createAt int
func (_e *MockRepo_Expecter) CreateQuestion(patientId interface{}, topic interface{}, question interface{}, createAt interface{}) *MockRepo_CreateQuestion_Call {
	return &MockRepo_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", patientId, topic, question, createAt)}
}

func (_c *MockRepo_CreateQuestion_Call) Run(run func(patientId int, topic string, question string, createAt int)) *MockRepo_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepo_CreateQuestion_Call) Return(n int, err error) *MockRepo_CreateQuestion_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepo_CreateQuestion_Call) RunAndReturn(run func(patientId int, topic string, question string, createAt int) (int, error)) *MockRepo_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppointment provides a mock function for the type MockRepo
func (_mock *MockRepo) DeleteAppointment(appointmentId any) error {
	ret := _mock.Called(appointmentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppointment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(appointmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeleteAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppointment'
type MockRepo_DeleteAppointment_Call struct {
	*mock.Call
}

// DeleteAppointment is a helper method to define mock.On call
//   - appointmentId any
func (_e *MockRepo_Expecter) DeleteAppointment(appointmentId interface{}) *MockRepo_DeleteAppointment_Call {
	return &MockRepo_DeleteAppointment_Call{Call: _e.mock.On("DeleteAppointment", appointmentId)}
}

func (_c *MockRepo_DeleteAppointment_Call) Run(run func(appointmentId any)) *MockRepo_DeleteAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_DeleteAppointment_Call) Return(err error) *MockRepo_DeleteAppointment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeleteAppointment_Call) RunAndReturn(run func(appointmentId any) error) *MockRepo_DeleteAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContent provides a mock function for the type MockRepo
func (_mock *MockRepo) DeleteContent(contentID any) error {
	ret := _mock.Called(contentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(contentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeleteContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContent'
type MockRepo_DeleteContent_Call struct {
	*mock.Call
}

// DeleteContent is a helper method to define mock.On call
//   - contentID any
func (_e *MockRepo_Expecter) DeleteContent(contentID interface{}) *MockRepo_DeleteContent_Call {
	return &MockRepo_DeleteContent_Call{Call: _e.mock.On("DeleteContent", contentID)}
}

func (_c *MockRepo_DeleteContent_Call) Run(run func(contentID any)) *MockRepo_DeleteContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_DeleteContent_Call) Return(err error) *MockRepo_DeleteContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeleteContent_Call) RunAndReturn(run func(contentID any) error) *MockRepo_DeleteContent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function for the type MockRepo
func (_mock *MockRepo) DeleteDevice(deviceId any) error {
	ret := _mock.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(deviceId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockRepo_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - deviceId any
func (_e *MockRepo_Expecter) DeleteDevice(deviceId interface{}) *MockRepo_DeleteDevice_Call {
	return &MockRepo_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", deviceId)}
}

func (_c *MockRepo_DeleteDevice_Call) Run(run func(deviceId any)) *MockRepo_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_DeleteDevice_Call) Return(err error) *MockRepo_DeleteDevice_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeleteDevice_Call) RunAndReturn(run func(deviceId any) error) *MockRepo_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDoctorById provides a mock function for the type MockRepo
func (_mock *MockRepo) DeleteDoctorById(id any) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDoctorById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeleteDoctorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDoctorById'
type MockRepo_DeleteDoctorById_Call struct {
	*mock.Call
}

// DeleteDoctorById is a helper method to define mock.On call
//   - id any
func (_e *MockRepo_Expecter) DeleteDoctorById(id interface{}) *MockRepo_DeleteDoctorById_Call {
	return &MockRepo_DeleteDoctorById_Call{Call: _e.mock.On("DeleteDoctorById", id)}
}

func (_c *MockRepo_DeleteDoctorById_Call) Run(run func(id any)) *MockRepo_DeleteDoctorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_DeleteDoctorById_Call) Return(err error) *MockRepo_DeleteDoctorById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeleteDoctorById_Call) RunAndReturn(run func(id any) error) *MockRepo_DeleteDoctorById_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePatientById provides a mock function for the type MockRepo
func (_mock *MockRepo) DeletePatientById(id any) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePatientById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeletePatientById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePatientById'
type MockRepo_DeletePatientById_Call struct {
	*mock.Call
}

// DeletePatientById is a helper method to define mock.On call
//   - id any
func (_e *MockRepo_Expecter) DeletePatientById(id interface{}) *MockRepo_DeletePatientById_Call {
	return &MockRepo_DeletePatientById_Call{Call: _e.mock.On("DeletePatientById", id)}
}

func (_c *MockRepo_DeletePatientById_Call) Run(run func(id any)) *MockRepo_DeletePatientById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_DeletePatientById_Call) Return(err error) *MockRepo_DeletePatientById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeletePatientById_Call) RunAndReturn(run func(id any) error) *MockRepo_DeletePatientById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuestion provides a mock function for the type MockRepo
func (_mock *MockRepo) DeleteQuestion(questionId any) error {
	ret := _mock.Called(questionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuestion")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(questionId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeleteQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuestion'
type MockRepo_DeleteQuestion_Call struct {
	*mock.Call
}

// DeleteQuestion is a helper method to define mock.On call
//   - questionId any
func (_e *MockRepo_Expecter) DeleteQuestion(questionId interface{}) *MockRepo_DeleteQuestion_Call {
	return &MockRepo_DeleteQuestion_Call{Call: _e.mock.On("DeleteQuestion", questionId)}
}

func (_c *MockRepo_DeleteQuestion_Call) Run(run func(questionId any)) *MockRepo_DeleteQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_DeleteQuestion_Call) Return(err error) *MockRepo_DeleteQuestion_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeleteQuestion_Call) RunAndReturn(run func(questionId any) error) *MockRepo_DeleteQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAppointment provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAllAppointment(limit int, offset int, criteria ...Criteria) ([]model.SafeAppointment, error) {
	var tmpRet mock.Arguments
	if len(criteria) > 0 {
		tmpRet = _mock.Called(limit, offset, criteria)
	} else {
		tmpRet = _mock.Called(limit, offset)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllAppointment")
	}

	var r0 []model.SafeAppointment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) ([]model.SafeAppointment, error)); ok {
		return returnFunc(limit, offset, criteria...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) []model.SafeAppointment); ok {
		r0 = returnFunc(limit, offset, criteria...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SafeAppointment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, ...Criteria) error); ok {
		r1 = returnFunc(limit, offset, criteria...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAllAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAppointment'
type MockRepo_GetAllAppointment_Call struct {
	*mock.Call
}

// GetAllAppointment is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - criteria ...Criteria
func (_e *MockRepo_Expecter) GetAllAppointment(limit interface{}, offset interface{}, criteria ...interface{}) *MockRepo_GetAllAppointment_Call {
	return &MockRepo_GetAllAppointment_Call{Call: _e.mock.On("GetAllAppointment",
		append([]interface{}{limit, offset}, criteria...)...)}
}

func (_c *MockRepo_GetAllAppointment_Call) Run(run func(limit int, offset int, criteria ...Criteria)) *MockRepo_GetAllAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []Criteria
		var variadicArgs []Criteria
		if len(args) > 2 {
			variadicArgs = args[2].([]Criteria)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRepo_GetAllAppointment_Call) Return(safeAppointments []model.SafeAppointment, err error) *MockRepo_GetAllAppointment_Call {
	_c.Call.Return(safeAppointments, err)
	return _c
}

func (_c *MockRepo_GetAllAppointment_Call) RunAndReturn(run func(limit int, offset int, criteria ...Criteria) ([]model.SafeAppointment, error)) *MockRepo_GetAllAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllContent provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAllContent(limit int, offset int, criteria ...Criteria) ([]model.Content, error) {
	var tmpRet mock.Arguments
	if len(criteria) > 0 {
		tmpRet = _mock.Called(limit, offset, criteria)
	} else {
		tmpRet = _mock.Called(limit, offset)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllContent")
	}

	var r0 []model.Content
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) ([]model.Content, error)); ok {
		return returnFunc(limit, offset, criteria...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) []model.Content); ok {
		r0 = returnFunc(limit, offset, criteria...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Content)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, ...Criteria) error); ok {
		r1 = returnFunc(limit, offset, criteria...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAllContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllContent'
type MockRepo_GetAllContent_Call struct {
	*mock.Call
}

// GetAllContent is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - criteria ...Criteria
func (_e *MockRepo_Expecter) GetAllContent(limit interface{}, offset interface{}, criteria ...interface{}) *MockRepo_GetAllContent_Call {
	return &MockRepo_GetAllContent_Call{Call: _e.mock.On("GetAllContent",
		append([]interface{}{limit, offset}, criteria...)...)}
}

func (_c *MockRepo_GetAllContent_Call) Run(run func(limit int, offset int, criteria ...Criteria)) *MockRepo_GetAllContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []Criteria
		var variadicArgs []Criteria
		if len(args) > 2 {
			variadicArgs = args[2].([]Criteria)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRepo_GetAllContent_Call) Return(contents []model.Content, err error) *MockRepo_GetAllContent_Call {
	_c.Call.Return(contents, err)
	return _c
}

func (_c *MockRepo_GetAllContent_Call) RunAndReturn(run func(limit int, offset int, criteria ...Criteria) ([]model.Content, error)) *MockRepo_GetAllContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDevice provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAllDevice(criteria ...Criteria) ([]model.Device, error) {
	var tmpRet mock.Arguments
	if len(criteria) > 0 {
		tmpRet = _mock.Called(criteria)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllDevice")
	}

	var r0 []model.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(...Criteria) ([]model.Device, error)); ok {
		return returnFunc(criteria...)
	}
	if returnFunc, ok := ret.Get(0).(func(...Criteria) []model.Device); ok {
		r0 = returnFunc(criteria...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(...Criteria) error); ok {
		r1 = returnFunc(criteria...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAllDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDevice'
type MockRepo_GetAllDevice_Call struct {
	*mock.Call
}

// GetAllDevice is a helper method to define mock.On call
//   - criteria ...Criteria
func (_e *MockRepo_Expecter) GetAllDevice(criteria ...interface{}) *MockRepo_GetAllDevice_Call {
	return &MockRepo_GetAllDevice_Call{Call: _e.mock.On("GetAllDevice",
		append([]interface{}{}, criteria...)...)}
}

func (_c *MockRepo_GetAllDevice_Call) Run(run func(criteria ...Criteria)) *MockRepo_GetAllDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []Criteria
		var variadicArgs []Criteria
		if len(args) > 0 {
			variadicArgs = args[0].([]Criteria)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockRepo_GetAllDevice_Call) Return(devices []model.Device, err error) *MockRepo_GetAllDevice_Call {
	_c.Call.Return(devices, err)
	return _c
}

func (_c *MockRepo_GetAllDevice_Call) RunAndReturn(run func(criteria ...Criteria) ([]model.Device, error)) *MockRepo_GetAllDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDoctor provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAllDoctor(limit int, offset int, criteria ...Criteria) ([]model.TrimDoctor, error) {
	var tmpRet mock.Arguments
	if len(criteria) > 0 {
		tmpRet = _mock.Called(limit, offset, criteria)
	} else {
		tmpRet = _mock.Called(limit, offset)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllDoctor")
	}

	var r0 []model.TrimDoctor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) ([]model.TrimDoctor, error)); ok {
		return returnFunc(limit, offset, criteria...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) []model.TrimDoctor); ok {
		r0 = returnFunc(limit, offset, criteria...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TrimDoctor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, ...Criteria) error); ok {
		r1 = returnFunc(limit, offset, criteria...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAllDoctor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDoctor'
type MockRepo_GetAllDoctor_Call struct {
	*mock.Call
}

// GetAllDoctor is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - criteria ...Criteria
func (_e *MockRepo_Expecter) GetAllDoctor(limit interface{}, offset interface{}, criteria ...interface{}) *MockRepo_GetAllDoctor_Call {
	return &MockRepo_GetAllDoctor_Call{Call: _e.mock.On("GetAllDoctor",
		append([]interface{}{limit, offset}, criteria...)...)}
}

func (_c *MockRepo_GetAllDoctor_Call) Run(run func(limit int, offset int, criteria ...Criteria)) *MockRepo_GetAllDoctor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []Criteria
		var variadicArgs []Criteria
		if len(args) > 2 {
			variadicArgs = args[2].([]Criteria)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRepo_GetAllDoctor_Call) Return(trimDoctors []model.TrimDoctor, err error) *MockRepo_GetAllDoctor_Call {
	_c.Call.Return(trimDoctors, err)
	return _c
}

func (_c *MockRepo_GetAllDoctor_Call) RunAndReturn(run func(limit int, offset int, criteria ...Criteria) ([]model.TrimDoctor, error)) *MockRepo_GetAllDoctor_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPatient provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAllPatient(limit int, offset int, criteria ...Criteria) ([]model.Patient, error) {
	var tmpRet mock.Arguments
	if len(criteria) > 0 {
		tmpRet = _mock.Called(limit, offset, criteria)
	} else {
		tmpRet = _mock.Called(limit, offset)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllPatient")
	}

	var r0 []model.Patient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) ([]model.Patient, error)); ok {
		return returnFunc(limit, offset, criteria...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) []model.Patient); ok {
		r0 = returnFunc(limit, offset, criteria...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Patient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, ...Criteria) error); ok {
		r1 = returnFunc(limit, offset, criteria...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAllPatient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPatient'
type MockRepo_GetAllPatient_Call struct {
	*mock.Call
}

// GetAllPatient is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - criteria ...Criteria
func (_e *MockRepo_Expecter) GetAllPatient(limit interface{}, offset interface{}, criteria ...interface{}) *MockRepo_GetAllPatient_Call {
	return &MockRepo_GetAllPatient_Call{Call: _e.mock.On("GetAllPatient",
		append([]interface{}{limit, offset}, criteria...)...)}
}

func (_c *MockRepo_GetAllPatient_Call) Run(run func(limit int, offset int, criteria ...Criteria)) *MockRepo_GetAllPatient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []Criteria
		var variadicArgs []Criteria
		if len(args) > 2 {
			variadicArgs = args[2].([]Criteria)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRepo_GetAllPatient_Call) Return(patients []model.Patient, err error) *MockRepo_GetAllPatient_Call {
	_c.Call.Return(patients, err)
	return _c
}

func (_c *MockRepo_GetAllPatient_Call) RunAndReturn(run func(limit int, offset int, criteria ...Criteria) ([]model.Patient, error)) *MockRepo_GetAllPatient_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllQuestion provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAllQuestion(limit int, offset int, criteria ...Criteria) ([]model.QuestionTopic, error) {
	var tmpRet mock.Arguments
	if len(criteria) > 0 {
		tmpRet = _mock.Called(limit, offset, criteria)
	} else {
		tmpRet = _mock.Called(limit, offset)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllQuestion")
	}

	var r0 []model.QuestionTopic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) ([]model.QuestionTopic, error)); ok {
		return returnFunc(limit, offset, criteria...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, ...Criteria) []model.QuestionTopic); ok {
		r0 = returnFunc(limit, offset, criteria...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.QuestionTopic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, ...Criteria) error); ok {
		r1 = returnFunc(limit, offset, criteria...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAllQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllQuestion'
type MockRepo_GetAllQuestion_Call struct {
	*mock.Call
}

// GetAllQuestion is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - criteria ...Criteria
func (_e *MockRepo_Expecter) GetAllQuestion(limit interface{}, offset interface{}, criteria ...interface{}) *MockRepo_GetAllQuestion_Call {
	return &MockRepo_GetAllQuestion_Call{Call: _e.mock.On("GetAllQuestion",
		append([]interface{}{limit, offset}, criteria...)...)}
}

func (_c *MockRepo_GetAllQuestion_Call) Run(run func(limit int, offset int, criteria ...Criteria)) *MockRepo_GetAllQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []Criteria
		var variadicArgs []Criteria
		if len(args) > 2 {
			variadicArgs = args[2].([]Criteria)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRepo_GetAllQuestion_Call) Return(questionTopics []model.QuestionTopic, err error) *MockRepo_GetAllQuestion_Call {
	_c.Call.Return(questionTopics, err)
	return _c
}

func (_c *MockRepo_GetAllQuestion_Call) RunAndReturn(run func(limit int, offset int, criteria ...Criteria) ([]model.QuestionTopic, error)) *MockRepo_GetAllQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppointment provides a mock function for the type MockRepo
func (_mock *MockRepo) GetAppointment(appointmentId any) (model.SafeAppointment, error) {
	ret := _mock.Called(appointmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetAppointment")
	}

	var r0 model.SafeAppointment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (model.SafeAppointment, error)); ok {
		return returnFunc(appointmentId)
	}
	if returnFunc, ok := ret.Get(0).(func(any) model.SafeAppointment); ok {
		r0 = returnFunc(appointmentId)
	} else {
		r0 = ret.Get(0).(model.SafeAppointment)
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(appointmentId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppointment'
type MockRepo_GetAppointment_Call struct {
	*mock.Call
}

// GetAppointment is a helper method to define mock.On call
//   - appointmentId any
func (_e *MockRepo_Expecter) GetAppointment(appointmentId interface{}) *MockRepo_GetAppointment_Call {
	return &MockRepo_GetAppointment_Call{Call: _e.mock.On("GetAppointment", appointmentId)}
}

func (_c *MockRepo_GetAppointment_Call) Run(run func(appointmentId any)) *MockRepo_GetAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetAppointment_Call) Return(safeAppointment model.SafeAppointment, err error) *MockRepo_GetAppointment_Call {
	_c.Call.Return(safeAppointment, err)
	return _c
}

func (_c *MockRepo_GetAppointment_Call) RunAndReturn(run func(appointmentId any) (model.SafeAppointment, error)) *MockRepo_GetAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// GetContent provides a mock function for the type MockRepo
func (_mock *MockRepo) GetContent(contentID any) (model.Content, error) {
	ret := _mock.Called(contentID)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 model.Content
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (model.Content, error)); ok {
		return returnFunc(contentID)
	}
	if returnFunc, ok := ret.Get(0).(func(any) model.Content); ok {
		r0 = returnFunc(contentID)
	} else {
		r0 = ret.Get(0).(model.Content)
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(contentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type MockRepo_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - contentID any
func (_e *MockRepo_Expecter) GetContent(contentID interface{}) *MockRepo_GetContent_Call {
	return &MockRepo_GetContent_Call{Call: _e.mock.On("GetContent", contentID)}
}

func (_c *MockRepo_GetContent_Call) Run(run func(contentID any)) *MockRepo_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetContent_Call) Return(content model.Content, err error) *MockRepo_GetContent_Call {
	_c.Call.Return(content, err)
	return _c
}

func (_c *MockRepo_GetContent_Call) RunAndReturn(run func(contentID any) (model.Content, error)) *MockRepo_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetDoctorById provides a mock function for the type MockRepo
func (_mock *MockRepo) GetDoctorById(id any) (model.Doctor, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDoctorById")
	}

	var r0 model.Doctor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (model.Doctor, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(any) model.Doctor); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.Doctor)
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetDoctorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDoctorById'
type MockRepo_GetDoctorById_Call struct {
	*mock.Call
}

// GetDoctorById is a helper method to define mock.On call
//   - id any
func (_e *MockRepo_Expecter) GetDoctorById(id interface{}) *MockRepo_GetDoctorById_Call {
	return &MockRepo_GetDoctorById_Call{Call: _e.mock.On("GetDoctorById", id)}
}

func (_c *MockRepo_GetDoctorById_Call) Run(run func(id any)) *MockRepo_GetDoctorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetDoctorById_Call) Return(doctor model.Doctor, err error) *MockRepo_GetDoctorById_Call {
	_c.Call.Return(doctor, err)
	return _c
}

func (_c *MockRepo_GetDoctorById_Call) RunAndReturn(run func(id any) (model.Doctor, error)) *MockRepo_GetDoctorById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDoctorByUsername provides a mock function for the type MockRepo
func (_mock *MockRepo) GetDoctorByUsername(username string) (model.Doctor, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetDoctorByUsername")
	}

	var r0 model.Doctor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.Doctor, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.Doctor); ok {
		r0 = returnFunc(username)
	} else {
		r0 = ret.Get(0).(model.Doctor)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetDoctorByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDoctorByUsername'
type MockRepo_GetDoctorByUsername_Call struct {
	*mock.Call
}

// GetDoctorByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockRepo_Expecter) GetDoctorByUsername(username interface{}) *MockRepo_GetDoctorByUsername_Call {
	return &MockRepo_GetDoctorByUsername_Call{Call: _e.mock.On("GetDoctorByUsername", username)}
}

func (_c *MockRepo_GetDoctorByUsername_Call) Run(run func(username string)) *MockRepo_GetDoctorByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetDoctorByUsername_Call) Return(doctor model.Doctor, err error) *MockRepo_GetDoctorByUsername_Call {
	_c.Call.Return(doctor, err)
	return _c
}

func (_c *MockRepo_GetDoctorByUsername_Call) RunAndReturn(run func(username string) (model.Doctor, error)) *MockRepo_GetDoctorByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatientByHN provides a mock function for the type MockRepo
func (_mock *MockRepo) GetPatientByHN(hn string) (model.Patient, error) {
	ret := _mock.Called(hn)

	if len(ret) == 0 {
		panic("no return value specified for GetPatientByHN")
	}

	var r0 model.Patient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.Patient, error)); ok {
		return returnFunc(hn)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.Patient); ok {
		r0 = returnFunc(hn)
	} else {
		r0 = ret.Get(0).(model.Patient)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(hn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetPatientByHN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatientByHN'
type MockRepo_GetPatientByHN_Call struct {
	*mock.Call
}

// GetPatientByHN is a helper method to define mock.On call
//   - hn string
func (_e *MockRepo_Expecter) GetPatientByHN(hn interface{}) *MockRepo_GetPatientByHN_Call {
	return &MockRepo_GetPatientByHN_Call{Call: _e.mock.On("GetPatientByHN", hn)}
}

func (_c *MockRepo_GetPatientByHN_Call) Run(run func(hn string)) *MockRepo_GetPatientByHN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetPatientByHN_Call) Return(patient model.Patient, err error) *MockRepo_GetPatientByHN_Call {
	_c.Call.Return(patient, err)
	return _c
}

func (_c *MockRepo_GetPatientByHN_Call) RunAndReturn(run func(hn string) (model.Patient, error)) *MockRepo_GetPatientByHN_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatientById provides a mock function for the type MockRepo
func (_mock *MockRepo) GetPatientById(id any) (model.Patient, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPatientById")
	}

	var r0 model.Patient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (model.Patient, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(any) model.Patient); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.Patient)
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetPatientById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatientById'
type MockRepo_GetPatientById_Call struct {
	*mock.Call
}

// GetPatientById is a helper method to define mock.On call
//   - id any
func (_e *MockRepo_Expecter) GetPatientById(id interface{}) *MockRepo_GetPatientById_Call {
	return &MockRepo_GetPatientById_Call{Call: _e.mock.On("GetPatientById", id)}
}

func (_c *MockRepo_GetPatientById_Call) Run(run func(id any)) *MockRepo_GetPatientById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetPatientById_Call) Return(patient model.Patient, err error) *MockRepo_GetPatientById_Call {
	_c.Call.Return(patient, err)
	return _c
}

func (_c *MockRepo_GetPatientById_Call) RunAndReturn(run func(id any) (model.Patient, error)) *MockRepo_GetPatientById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatientByNID provides a mock function for the type MockRepo
func (_mock *MockRepo) GetPatientByNID(nid string) (model.Patient, error) {
	ret := _mock.Called(nid)

	if len(ret) == 0 {
		panic("no return value specified for GetPatientByNID")
	}

	var r0 model.Patient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.Patient, error)); ok {
		return returnFunc(nid)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.Patient); ok {
		r0 = returnFunc(nid)
	} else {
		r0 = ret.Get(0).(model.Patient)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(nid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetPatientByNID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatientByNID'
type MockRepo_GetPatientByNID_Call struct {
	*mock.Call
}

// GetPatientByNID is a helper method to define mock.On call
//   - nid string
func (_e *MockRepo_Expecter) GetPatientByNID(nid interface{}) *MockRepo_GetPatientByNID_Call {
	return &MockRepo_GetPatientByNID_Call{Call: _e.mock.On("GetPatientByNID", nid)}
}

func (_c *MockRepo_GetPatientByNID_Call) Run(run func(nid string)) *MockRepo_GetPatientByNID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetPatientByNID_Call) Return(patient model.Patient, err error) *MockRepo_GetPatientByNID_Call {
	_c.Call.Return(patient, err)
	return _c
}

func (_c *MockRepo_GetPatientByNID_Call) RunAndReturn(run func(nid string) (model.Patient, error)) *MockRepo_GetPatientByNID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestion provides a mock function for the type MockRepo
func (_mock *MockRepo) GetQuestion(questionId any) (model.SafeQuestion, error) {
	ret := _mock.Called(questionId)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestion")
	}

	var r0 model.SafeQuestion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (model.SafeQuestion, error)); ok {
		return returnFunc(questionId)
	}
	if returnFunc, ok := ret.Get(0).(func(any) model.SafeQuestion); ok {
		r0 = returnFunc(questionId)
	} else {
		r0 = ret.Get(0).(model.SafeQuestion)
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(questionId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestion'
type MockRepo_GetQuestion_Call struct {
	*mock.Call
}

// GetQuestion is a helper method to define mock.On call
//   - questionId any
func (_e *MockRepo_Expecter) GetQuestion(questionId interface{}) *MockRepo_GetQuestion_Call {
	return &MockRepo_GetQuestion_Call{Call: _e.mock.On("GetQuestion", questionId)}
}

func (_c *MockRepo_GetQuestion_Call) Run(run func(questionId any)) *MockRepo_GetQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_GetQuestion_Call) Return(safeQuestion model.SafeQuestion, err error) *MockRepo_GetQuestion_Call {
	_c.Call.Return(safeQuestion, err)
	return _c
}

func (_c *MockRepo_GetQuestion_Call) RunAndReturn(run func(questionId any) (model.SafeQuestion, error)) *MockRepo_GetQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function for the type MockRepo
func (_mock *MockRepo) New(db *gorm.DB) IRepo {
	ret := _mock.Called(db)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 IRepo
	if returnFunc, ok := ret.Get(0).(func(*gorm.DB) IRepo); ok {
		r0 = returnFunc(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(IRepo)
		}
	}
	return r0
}

// MockRepo_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockRepo_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - db *gorm.DB
func (_e *MockRepo_Expecter) New(db interface{}) *MockRepo_New_Call {
	return &MockRepo_New_Call{Call: _e.mock.On("New", db)}
}

func (_c *MockRepo_New_Call) Run(run func(db *gorm.DB)) *MockRepo_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_New_Call) Return(iRepo IRepo) *MockRepo_New_Call {
	_c.Call.Return(iRepo)
	return _c
}

func (_c *MockRepo_New_Call) RunAndReturn(run func(db *gorm.DB) IRepo) *MockRepo_New_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAppointment provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdateAppointment(appointment model.Appointment) error {
	ret := _mock.Called(appointment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppointment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Appointment) error); ok {
		r0 = returnFunc(appointment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdateAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAppointment'
type MockRepo_UpdateAppointment_Call struct {
	*mock.Call
}

// UpdateAppointment is a helper method to define mock.On call
//   - appointment model.Appointment
func (_e *MockRepo_Expecter) UpdateAppointment(appointment interface{}) *MockRepo_UpdateAppointment_Call {
	return &MockRepo_UpdateAppointment_Call{Call: _e.mock.On("UpdateAppointment", appointment)}
}

func (_c *MockRepo_UpdateAppointment_Call) Run(run func(appointment model.Appointment)) *MockRepo_UpdateAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Appointment
		if args[0] != nil {
			arg0 = args[0].(model.Appointment)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_UpdateAppointment_Call) Return(err error) *MockRepo_UpdateAppointment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdateAppointment_Call) RunAndReturn(run func(appointment model.Appointment) error) *MockRepo_UpdateAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdateContent(content model.Content) error {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Content) error); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type MockRepo_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - content model.Content
func (_e *MockRepo_Expecter) UpdateContent(content interface{}) *MockRepo_UpdateContent_Call {
	return &MockRepo_UpdateContent_Call{Call: _e.mock.On("UpdateContent", content)}
}

func (_c *MockRepo_UpdateContent_Call) Run(run func(content model.Content)) *MockRepo_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Content
		if args[0] != nil {
			arg0 = args[0].(model.Content)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_UpdateContent_Call) Return(err error) *MockRepo_UpdateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdateContent_Call) RunAndReturn(run func(content model.Content) error) *MockRepo_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevice provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdateDevice(d model.Device) error {
	ret := _mock.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Device) error); ok {
		r0 = returnFunc(d)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevice'
type MockRepo_UpdateDevice_Call struct {
	*mock.Call
}

// UpdateDevice is a helper method to define mock.On call
//   - d model.Device
func (_e *MockRepo_Expecter) UpdateDevice(d interface{}) *MockRepo_UpdateDevice_Call {
	return &MockRepo_UpdateDevice_Call{Call: _e.mock.On("UpdateDevice", d)}
}

func (_c *MockRepo_UpdateDevice_Call) Run(run func(d model.Device)) *MockRepo_UpdateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Device
		if args[0] != nil {
			arg0 = args[0].(model.Device)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_UpdateDevice_Call) Return(err error) *MockRepo_UpdateDevice_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdateDevice_Call) RunAndReturn(run func(d model.Device) error) *MockRepo_UpdateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDoctor provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdateDoctor(doctor model.Doctor) error {
	ret := _mock.Called(doctor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDoctor")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Doctor) error); ok {
		r0 = returnFunc(doctor)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdateDoctor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDoctor'
type MockRepo_UpdateDoctor_Call struct {
	*mock.Call
}

// UpdateDoctor is a helper method to define mock.On call
//   - doctor model.Doctor
func (_e *MockRepo_Expecter) UpdateDoctor(doctor interface{}) *MockRepo_UpdateDoctor_Call {
	return &MockRepo_UpdateDoctor_Call{Call: _e.mock.On("UpdateDoctor", doctor)}
}

func (_c *MockRepo_UpdateDoctor_Call) Run(run func(doctor model.Doctor)) *MockRepo_UpdateDoctor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Doctor
		if args[0] != nil {
			arg0 = args[0].(model.Doctor)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_UpdateDoctor_Call) Return(err error) *MockRepo_UpdateDoctor_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdateDoctor_Call) RunAndReturn(run func(doctor model.Doctor) error) *MockRepo_UpdateDoctor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePatient provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdatePatient(patient model.Patient) error {
	ret := _mock.Called(patient)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePatient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Patient) error); ok {
		r0 = returnFunc(patient)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdatePatient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePatient'
type MockRepo_UpdatePatient_Call struct {
	*mock.Call
}

// UpdatePatient is a helper method to define mock.On call
//   - patient model.Patient
func (_e *MockRepo_Expecter) UpdatePatient(patient interface{}) *MockRepo_UpdatePatient_Call {
	return &MockRepo_UpdatePatient_Call{Call: _e.mock.On("UpdatePatient", patient)}
}

func (_c *MockRepo_UpdatePatient_Call) Run(run func(patient model.Patient)) *MockRepo_UpdatePatient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Patient
		if args[0] != nil {
			arg0 = args[0].(model.Patient)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepo_UpdatePatient_Call) Return(err error) *MockRepo_UpdatePatient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdatePatient_Call) RunAndReturn(run func(patient model.Patient) error) *MockRepo_UpdatePatient_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePatientMedicine provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdatePatientMedicine(patientId int, medicines []model.Medicine) error {
	ret := _mock.Called(patientId, medicines)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePatientMedicine")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, []model.Medicine) error); ok {
		r0 = returnFunc(patientId, medicines)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdatePatientMedicine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePatientMedicine'
type MockRepo_UpdatePatientMedicine_Call struct {
	*mock.Call
}

// UpdatePatientMedicine is a helper method to define mock.On call
//   - patientId int
//   - medicines []model.Medicine
func (_e *MockRepo_Expecter) UpdatePatientMedicine(patientId interface{}, medicines interface{}) *MockRepo_UpdatePatientMedicine_Call {
	return &MockRepo_UpdatePatientMedicine_Call{Call: _e.mock.On("UpdatePatientMedicine", patientId, medicines)}
}

func (_c *MockRepo_UpdatePatientMedicine_Call) Run(run func(patientId int, medicines []model.Medicine)) *MockRepo_UpdatePatientMedicine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []model.Medicine
		if args[1] != nil {
			arg1 = args[1].([]model.Medicine)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_UpdatePatientMedicine_Call) Return(err error) *MockRepo_UpdatePatientMedicine_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdatePatientMedicine_Call) RunAndReturn(run func(patientId int, medicines []model.Medicine) error) *MockRepo_UpdatePatientMedicine_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePatientVaccineHistory provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdatePatientVaccineHistory(patientId int, vaccineHistory []model.VaccineHistory) error {
	ret := _mock.Called(patientId, vaccineHistory)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePatientVaccineHistory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, []model.VaccineHistory) error); ok {
		r0 = returnFunc(patientId, vaccineHistory)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdatePatientVaccineHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePatientVaccineHistory'
type MockRepo_UpdatePatientVaccineHistory_Call struct {
	*mock.Call
}

// UpdatePatientVaccineHistory is a helper method to define mock.On call
//   - patientId int
//   - vaccineHistory []model.VaccineHistory
func (_e *MockRepo_Expecter) UpdatePatientVaccineHistory(patientId interface{}, vaccineHistory interface{}) *MockRepo_UpdatePatientVaccineHistory_Call {
	return &MockRepo_UpdatePatientVaccineHistory_Call{Call: _e.mock.On("UpdatePatientVaccineHistory", patientId, vaccineHistory)}
}

func (_c *MockRepo_UpdatePatientVaccineHistory_Call) Run(run func(patientId int, vaccineHistory []model.VaccineHistory)) *MockRepo_UpdatePatientVaccineHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []model.VaccineHistory
		if args[1] != nil {
			arg1 = args[1].([]model.VaccineHistory)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_UpdatePatientVaccineHistory_Call) Return(err error) *MockRepo_UpdatePatientVaccineHistory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdatePatientVaccineHistory_Call) RunAndReturn(run func(patientId int, vaccineHistory []model.VaccineHistory) error) *MockRepo_UpdatePatientVaccineHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuestionAnswer provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdateQuestionAnswer(questionId int, answer string, doctorId int) error {
	ret := _mock.Called(questionId, answer, doctorId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuestionAnswer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, int) error); ok {
		r0 = returnFunc(questionId, answer, doctorId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_UpdateQuestionAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuestionAnswer'
type MockRepo_UpdateQuestionAnswer_Call struct {
	*mock.Call
}

// UpdateQuestionAnswer is a helper method to define mock.On call
//   - questionId int
//   - answer string
//   - doctorId int
func (_e *MockRepo_Expecter) UpdateQuestionAnswer(questionId interface{}, answer interface{}, doctorId interface{}) *MockRepo_UpdateQuestionAnswer_Call {
	return &MockRepo_UpdateQuestionAnswer_Call{Call: _e.mock.On("UpdateQuestionAnswer", questionId, answer, doctorId)}
}

func (_c *MockRepo_UpdateQuestionAnswer_Call) Run(run func(questionId int, answer string, doctorId int)) *MockRepo_UpdateQuestionAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepo_UpdateQuestionAnswer_Call) Return(err error) *MockRepo_UpdateQuestionAnswer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_UpdateQuestionAnswer_Call) RunAndReturn(run func(questionId int, answer string, doctorId int) error) *MockRepo_UpdateQuestionAnswer_Call {
	_c.Call.Return(run)
	return _c
}
