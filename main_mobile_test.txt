// package main

// import (
// 	"fmt"
// 	"net/http"
// 	"strings"
// 	"testing"
// )

// func TestMobileAuthMiddleware(t *testing.T) {
// 	testCases := []testCase{
// 		{name: "request with no token", requestBody: nil, expected: http.StatusUnauthorized},
// 		{name: "request with invalid token", authToken: mobileInvalidAuthToken, requestBody: nil, expected: http.StatusUnauthorized},
// 		{name: "request with valid token", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusOK}}
// 	testInternal(t, testCases, "GET", "/mobile/api/profile")
// }

// func TestLogin(t *testing.T) {
// 	validInput := []byte(`{"hn" : "mt1","firstName" : "fnmt1","lastName" : "lnmt1","deviceName": "main_test","expoToken": "dummy-expo-token"}`)
// 	badInput := []byte(`{"firstName" : "mt1","lastName" : "lnmt1","deviceName": "main_test","expoToken": "dummy-expo-token"}`)
// 	invalidInput := []byte(`{"hn" : "mt1","firstName" : "fn3123","lastName" : "lnmt1","deviceName": "main_test","expoToken": "dummy-expo-token"}`)
// 	unverifiedAccInput := []byte(`{"hn" : "mt2","firstName" : "fnmt2","lastName" : "lnmt2","deviceName": "main_test","expoToken": "dummy-expo-token"}`)
// 	nonExistentAccInput := []byte(`{"hn" : "test30111","firstName" : "fn30","lastName" : "ln30","deviceName": "main_test","expoToken": "dummy-expo-token"}`)
// 	testCases := []testCase{
// 		{name: "request with valid input", requestBody: validInput, expected: http.StatusOK},
// 		{name: "request with bad input", requestBody: badInput, expected: http.StatusBadRequest},
// 		{name: "request with invalid input", requestBody: invalidInput, expected: http.StatusUnauthorized},
// 		{name: "request with unverified account input", requestBody: unverifiedAccInput, expected: http.StatusForbidden},
// 		{name: "request with nonexistent account", requestBody: nonExistentAccInput, expected: http.StatusNotFound}}
// 	testInternal(t, testCases, "POST", "/mobile/auth/login")
// }

// func TestSignup(t *testing.T) {
// 	validInput := []byte(`{"hn" : "mt3","firstName" : "fnmt3", "middleName" : "mnmt3","lastName" : "lnmt3","phone": "0000000","email": "test@tmail.com"}`)
// 	badInput := []byte(`{"firstName" : "fnmt3", "middleName" : "mnmt3","lastName" : "lnmt3","phone": "0000000","email": "test@tmail.com"}`)
// 	mnNotRequireMnInput := []byte(`{"hn" : "mt2","firstName" : "fnmt2", "middleName" : "mnmt2","lastName" : "lnmt2","phone": "0000000","email": "test@tmail.com"}`)
// 	noMnRequireMnInput := []byte(`{"hn" : "mt3","firstName" : "fnmt3","lastName" : "lnmt3","phone": "0000000","email": "test@tmail.com"}`)
// 	nonExistentAccInput := []byte(`{"hn" : "test28aa","firstName" : "fn28", "middleName" : "mn28","lastName" : "ln28","phone": "0000000","email": "test@tmail.com"}`)
// 	AlreadyVerifiedAccInput := []byte(`{"hn" : "mt1","firstName" : "fnmt1", "middleName" : "mnmt1","lastName" : "lnmt1","phone": "0000000","email": "test@tmail.com"}`)
// 	testCases := []testCase{
// 		{name: "request with bad input", requestBody: badInput, expected: http.StatusBadRequest},
// 		{name: "request with middleName but account not require middlename", requestBody: mnNotRequireMnInput, expected: http.StatusUnauthorized},
// 		{name: "request with no middleName but account require middlename", requestBody: noMnRequireMnInput, expected: http.StatusUnauthorized},
// 		{name: "request with nonexistent account", requestBody: nonExistentAccInput, expected: http.StatusNotFound},
// 		{name: "request with already verified account input", requestBody: AlreadyVerifiedAccInput, expected: http.StatusConflict},
// 		{name: "request with valid input", requestBody: validInput, expected: http.StatusOK}}
// 	testInternal(t, testCases, "POST", "/mobile/auth/signup")
// }

// func TestGetProfile(t *testing.T) {
// 	testCases := []testCase{
// 		{name: "request", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusOK},
// 	}
// 	testInternal(t, testCases, "GET", "/mobile/api/profile")
// }

// func TestGetAllAppointment(t *testing.T) {
// 	testCases := []testCase{
// 		{name: "request", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusOK},
// 	}
// 	testInternal(t, testCases, "GET", "/mobile/api/appointment")
// }

// func TestGetOneAppointment(t *testing.T) {
// 	testCaseSet1 := []testCase{
// 		{name: "request to own appointment", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusOK},
// 	}
// 	testInternal(t, testCaseSet1, "GET", fmt.Sprintf("/mobile/api/appointment/%d", selfAppointmentId))
// 	testCaseSet2 := []testCase{
// 		{name: "request to other patient's appointment", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusUnauthorized},
// 	}
// 	testInternal(t, testCaseSet2, "GET", fmt.Sprintf("/mobile/api/appointment/%d", otherPatientAppointmentId))
// 	testCaseSet3 := []testCase{
// 		{name: "request to nonexistent appointment", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusNotFound},
// 	}
// 	testInternal(t, testCaseSet3, "GET", "/mobile/api/appointment/999999")
// }

// func TestCreateAppointment(t *testing.T) {
// 	validInput := []byte(`{ "date" : 1766120265, "doctorId" : 1}`)
// 	badDateInput := []byte(`{ "date" : 1733745465, "doctorId" : 1}`)
// 	badDoctorIdInput := []byte(`{ "date" : 1766120265, "doctorId" : 999}`)
// 	missingDoctorIdInput := []byte(`{ "date" : 1766120265`)
// 	missingDateInput := []byte(`{ "doctorId" : 1}`)

// 	testCases := []testCase{
// 		{name: "request with bad date input", authToken: mobileValidAuthToken, requestBody: badDateInput, expected: http.StatusUnprocessableEntity},
// 		{name: "request with bad doctorId input", authToken: mobileValidAuthToken, requestBody: badDoctorIdInput, expected: http.StatusInternalServerError},
// 		{name: "request with missing date input", authToken: mobileValidAuthToken, requestBody: missingDateInput, expected: http.StatusBadRequest},
// 		{name: "request with missing doctorId input", authToken: mobileValidAuthToken, requestBody: missingDoctorIdInput, expected: http.StatusBadRequest},
// 		{name: "request with valid input", authToken: mobileValidAuthToken, requestBody: validInput, expected: http.StatusCreated},
// 	}
// 	testInternal(t, testCases, "POST", "/mobile/api/appointment")
// }

// // request to other patient's appointment
// func TestDeleteAppointment(t *testing.T) {
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to own appointment", authToken: mobileValidAuthToken, expected: http.StatusNoContent}},
// 		"DELETE",
// 		fmt.Sprintf("/mobile/api/appointment/%d", toBeDeletedAppointmentId),
// 	)
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to other patient's appointment", authToken: mobileValidAuthToken, expected: http.StatusUnauthorized}},
// 		"DELETE",
// 		fmt.Sprintf("/mobile/api/appointment/%d", otherPatientAppointmentId),
// 	)
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to nonexistent appointment", authToken: mobileValidAuthToken, expected: http.StatusNotFound}},
// 		"DELETE",
// 		"/mobile/api/appointment/8888",
// 	)
// }

// func TestGetAllQuestion(t *testing.T) {
// 	testCases := []testCase{
// 		{name: "request", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusOK},
// 	}
// 	testInternal(t, testCases, "GET", "/mobile/api/question")
// }

// func TestGetOneQuestion(t *testing.T) {
// 	testCaseSet1 := []testCase{
// 		{name: "request to own question", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusOK},
// 	}
// 	testInternal(t, testCaseSet1, "GET", fmt.Sprintf("/mobile/api/question/%d", selfQuestionId))
// 	testCaseSet2 := []testCase{
// 		{name: "request to other patient's question", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusUnauthorized},
// 	}
// 	testInternal(t, testCaseSet2, "GET", fmt.Sprintf("/mobile/api/question/%d", otherPatientQuestionId))
// 	testCaseSet3 := []testCase{
// 		{name: "request to nonexistent question", authToken: mobileValidAuthToken, requestBody: nil, expected: http.StatusNotFound},
// 	}
// 	testInternal(t, testCaseSet3, "GET", "/mobile/api/question/99999")
// }

// func TestCreateQuestion(t *testing.T) {
// 	validInput := []byte(`{ "topic" : "my topic", "question" : "my question"}`)
// 	exceedLimitTopicInput := []byte(fmt.Sprintf(`{ "topic" : "%s", "question" : "my question"}`, strings.Repeat("tests", 11)))
// 	exceedLimitQuestionInput := []byte(fmt.Sprintf(`{ "topic" : "sda", "question" : "%s"}`, strings.Repeat("tests", 141)))
// 	emptyTopicInput := []byte(`{ "topic" : "", "question" : "my question"}`)
// 	emptyQuestionInput := []byte(`{ "topic" : "my topic", "question" : ""}`)
// 	missingTopicInput := []byte(`{  "question" : "my question"}`)
// 	missingQuestionInput := []byte(`{ "topic" : "my topic"}`)

// 	testCases := []testCase{
// 		{name: "request with exceeding limit topic input", authToken: mobileValidAuthToken, requestBody: exceedLimitTopicInput, expected: http.StatusUnprocessableEntity},
// 		{name: "request with exceeding limit question input", authToken: mobileValidAuthToken, requestBody: exceedLimitQuestionInput, expected: http.StatusUnprocessableEntity},
// 		{name: "request with empty topic input", authToken: mobileValidAuthToken, requestBody: emptyTopicInput, expected: http.StatusBadRequest},
// 		{name: "request with empty question input", authToken: mobileValidAuthToken, requestBody: emptyQuestionInput, expected: http.StatusBadRequest},
// 		{name: "request with missing topic input", authToken: mobileValidAuthToken, requestBody: missingTopicInput, expected: http.StatusBadRequest},
// 		{name: "request with missing question input", authToken: mobileValidAuthToken, requestBody: missingQuestionInput, expected: http.StatusBadRequest},
// 		{name: "request with valid input", authToken: mobileValidAuthToken, requestBody: validInput, expected: http.StatusCreated},
// 	}
// 	testInternal(t, testCases, "POST", "/mobile/api/question")
// }

// func TestDeleteQuestion(t *testing.T) {
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to own question", authToken: mobileValidAuthToken, expected: http.StatusNoContent}},
// 		"DELETE",
// 		fmt.Sprintf("/mobile/api/question/%d", toBeDeletedQuestionId),
// 	)
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to other patient's question", authToken: mobileValidAuthToken, expected: http.StatusUnauthorized}},
// 		"DELETE",
// 		fmt.Sprintf("/mobile/api/question/%d", otherPatientQuestionId),
// 	)
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to nonexistent question", authToken: mobileValidAuthToken, expected: http.StatusNotFound}},
// 		"DELETE",
// 		"/mobile/api/question/9999",
// 	)
// }

// func TestGetAllDoctor(t *testing.T) {
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request", authToken: mobileValidAuthToken, expected: http.StatusOK}},
// 		"GET",
// 		"/mobile/api/doctor",
// 	)
// }

// func TestGetAllDevice(t *testing.T) {
// 	testInternal(
// 		t,
// 		[]testCase{{name: "request to get active devices for push notifications", authToken: mobileValidAuthToken, expected: http.StatusOK}},
// 		"GET",
// 		"/mobile/api/device",
// 	)
// }

// func TestCreateDevice(t *testing.T) {
// 	req := []byte(`{"deviceName" : "thunder client","expoToken" : "test insert new device"}`)
// 	tc := []testCase{{name: "request to insert new device for push notifications", authToken: mobileValidAuthToken, requestBody: req, expected: http.StatusOK}}
// 	testInternal(
// 		t,
// 		tc,
// 		"POST",
// 		"/mobile/api/device",
// 	)
// }
