// Code generated by mockery v2.53.3. DO NOT EDIT.

package notification

import mock "github.com/stretchr/testify/mock"

// MockNotificationService is an autogenerated mock type for the INotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// SendNotiByPatientId provides a mock function with given fields: id, title, body
func (_m *MockNotificationService) SendNotiByPatientId(id int, title string, body string) error {
	ret := _m.Called(id, title, body)

	if len(ret) == 0 {
		panic("no return value specified for SendNotiByPatientId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(id, title, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_SendNotiByPatientId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotiByPatientId'
type MockNotificationService_SendNotiByPatientId_Call struct {
	*mock.Call
}

// SendNotiByPatientId is a helper method to define mock.On call
//   - id int
//   - title string
//   - body string
func (_e *MockNotificationService_Expecter) SendNotiByPatientId(id interface{}, title interface{}, body interface{}) *MockNotificationService_SendNotiByPatientId_Call {
	return &MockNotificationService_SendNotiByPatientId_Call{Call: _e.mock.On("SendNotiByPatientId", id, title, body)}
}

func (_c *MockNotificationService_SendNotiByPatientId_Call) Run(run func(id int, title string, body string)) *MockNotificationService_SendNotiByPatientId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationService_SendNotiByPatientId_Call) Return(_a0 error) *MockNotificationService_SendNotiByPatientId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_SendNotiByPatientId_Call) RunAndReturn(run func(int, string, string) error) *MockNotificationService_SendNotiByPatientId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
